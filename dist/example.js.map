{"version":3,"sources":["src/cmsn_enum.js","src/cmsn_sdk.js","example.js"],"names":["ERROR","createEnum","unknown","ble_device_unreachable","ble_not_enabled","CMD","afeConfig","imuConfig","unused","pair","checkPairStatus","startDataStream","stopDataStream","shutdown","enterOTA","enterFactoryMode","restoreFactorySettings","setLEDColor","setDeviceName","setSleepIdleTime","setVibrationIntensity","getSystemInfo","getLeadOffStatus","CONNECTIVITY","connecting","connected","disconnecting","disconnected","CONTACT_STATE","contact","no_contact","ORIENTATION","bottomUp","leftArmEndUp","leftArmEndDown","topUp","leftFaceUp","leftFaceDown","AFE","SAMPLE_RATE","sr125","sr250","sr500","sr1000","CHANNEL","none","ch1","ch2","both","LEAD_OFF_OPTION","disabled","ac","dc_6na","dc_22na","dc_6ua","dc_22ua","ACC","sr1","sr10","sr25","sr50","sr100","sr200","OPTION","raw","six_d","IMU","sr26","sr52","sr104","sr208","sr416","sr833","input","type","String","doc","name","valueMap","Map","enumMap","v","val","num","has","Error","set","FN","get","enum","symbol","toUpperCase","globalDevice","DeviceMap","data_stream_service_uuid","data_stream_uuid_write","data_stream_uuid_notify","availableCallbacks","CMSNDeviceListener","callbacks","Object","cbs","entries","key","cb","console","error","CMSNDevice","window","listener","bleDevice","navigator","bluetooth","getAvailability","isBluetoothAvailable","log","addEventListener","event","value","options","acceptAllDevices","requestDevice","then","device","max","delay","toTry","success","fail","that","setTimeout","exponentialBackoff","onTryConnect","onConnected","connectivity","Enum","gatt","connect","getPrimaryServices","services","decoder","TextDecoder","deviceInfo","service","uuid","getCharacteristics","characteristics","characteristic","properties","write","characteristicWrite","notify","characteristicNotify","startNotifications","onCharacteristicValueChanged","BluetoothUUID","getCharacteristic","onBatteryLevelChanged","readValue","manufacturer","decode","model","serial","hardware","firmware","onDeviceInfoReady","undefined","params","JSON","stringify","postToSanbox","warn","command","message","postMessage","isInPairingMode","sendMessage","cmd","sendMessageWithCmd","sampleRate","color","sleepIdleTime","vibration","_connectivity","onConnectivityChanged","onDisconnected","id","reset","batteryLevel","target","getUint8","arrayBuffer","buffer","data","Uint8Array","deviceId","contactState","onContactStateChanged","orientation","onOrientationChanged","eeg","onEEGData","stats","onBrainWave","imu","onIMUData","attention","onAttention","meditation","onMeditation","writeValue","eventRaised","Date","exampleListener","sdk","document","getElementById","innerText","_","eegData","imuData","toFixed","addExampleButtons","onclick","setup","onClick","btn","i","f","scanBluetooth","contentWindow"],"mappings":"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","file":"example.js","sourceRoot":"..","sourcesContent":["/* Enum */\r\n\r\n// Enum: ERROR\r\nexport const ERROR = createEnum({\r\n    unknown: 0,\r\n\r\n    // BLE device error codes\r\n    ble_device_unreachable: -128,\r\n    ble_not_enabled: -129,\r\n});\r\n\r\n// Enum: CMD\r\nexport const CMD = createEnum({\r\n    afeConfig: -1,\r\n    imuConfig: -2,\r\n    unused: 0,\r\n    pair: 1,\r\n    checkPairStatus: 2,\r\n    startDataStream: 3,\r\n    stopDataStream: 4,\r\n    shutdown: 5,\r\n    enterOTA: 6,\r\n    enterFactoryMode: 7,\r\n    restoreFactorySettings: 8,\r\n    setLEDColor: 9,\r\n    setDeviceName: 10,\r\n    setSleepIdleTime: 11,\r\n    setVibrationIntensity: 12,\r\n    getSystemInfo: 13,\r\n    getLeadOffStatus: 14,\r\n});\r\n\r\n// Enum: CONNECTIVITY\r\nexport const CONNECTIVITY = createEnum({\r\n    connecting: 0,\r\n    connected: 1,\r\n    disconnecting: 2,\r\n    disconnected: 3,\r\n});\r\n\r\n// Enum: CONTACT_STATE\r\nexport const CONTACT_STATE = createEnum({\r\n    unknown: 0,\r\n    contact: 1,\r\n    no_contact: 2,\r\n});\r\n\r\n// Enum: ORIENTATION\r\nexport const ORIENTATION = createEnum({\r\n    unknown: 0,\r\n    bottomUp: 1,\r\n    leftArmEndUp: 2,\r\n    leftArmEndDown: 3,\r\n    topUp: 4,\r\n    leftFaceUp: 5,\r\n    leftFaceDown: 6\r\n});\r\n\r\n// Enum: AFE.SAMPLE_RATE, AFE.CHANNEL, AFE.LEAD_OFF_OPTION\r\nexport const AFE = {\r\n    SAMPLE_RATE: createEnum({\r\n        sr125: 0,\r\n        sr250: 1,\r\n        sr500: 2,\r\n        sr1000: 3,\r\n    }),\r\n\r\n    CHANNEL: createEnum({\r\n        none: 0,\r\n        ch1: 1,\r\n        ch2: 2,\r\n        both: 3,\r\n    }),\r\n\r\n    LEAD_OFF_OPTION: createEnum({\r\n        disabled: 0,\r\n        ac: 1,\r\n        dc_6na: 2,\r\n        dc_22na: 3,\r\n        dc_6ua: 4,\r\n        dc_22ua: 5,\r\n    })\r\n};\r\n\r\n// Enum: ACC.SAMPLE_RATE, ACC.OPTION\r\nexport const ACC = {\r\n    SAMPLE_RATE: createEnum({\r\n        sr1: 0,\r\n        sr10: 1,\r\n        sr25: 2,\r\n        sr50: 3,\r\n        sr100: 4,\r\n        sr200: 5,\r\n    }),\r\n\r\n    OPTION: createEnum({\r\n        disabled: 0,\r\n        raw: 1,\r\n        six_d: 2,\r\n    })\r\n};\r\n\r\nexport const IMU = {\r\n    SAMPLE_RATE: createEnum({\r\n        unused: 0,\r\n        sr125: 0x10,\r\n        sr26: 0x20,\r\n        sr52: 0x30,\r\n        sr104: 0x40,\r\n        sr208: 0x50,\r\n        sr416: 0x60,\r\n        sr833: 0x70,\r\n    }),\r\n};\r\n\r\n/* Example:\r\n * const STATE = createEnum({\r\n * on: 0,\r\n * off: 1\r\n * });\r\n *\r\n * STATE.ON => 'on'\r\n * STATE.OFF => 'off'\r\n *\r\n * STATE(0) => 'on'\r\n * STATE(1) => 'off'\r\n * STATE(2) => Error: unknown input enum: 2.\r\n *\r\n * STATE.enum.ON => 0\r\n * STATE.enum.OFF => 1\r\n *\r\n * STATE.enum('on') => 0\r\n * STATE.enum('off') => 1\r\n * STATE.enum(null) => Error: unknown input value: null.\r\n */\r\nfunction createEnum(input, type = String) {\r\n    // check the input, which should be one-to-one relationship\r\n    let doc = ` ENUM => VALUE (${type.name})\\n`;\r\n    doc += ' -----------------------\\n';\r\n    const valueMap = new Map();\r\n    const enumMap = new Map();\r\n    for (const v in input) {\r\n        const val = type(v);\r\n        const num = input[val];\r\n        if (enumMap.has(num)) {\r\n            throw Error(`the enum '${num}' is duplicated`);\r\n        }\r\n        valueMap.set(val, num);\r\n        enumMap.set(num, val);\r\n        doc += ` ${num} => ${val}\\n`;\r\n    }\r\n\r\n    const FN = (num) => {\r\n        if (!enumMap.has(num)) {\r\n            throw Error(`Invalid Enum: ${num}. The enum/value should be:\\n${doc}`);\r\n        }\r\n        return enumMap.get(num);\r\n    }\r\n\r\n    FN.enum = (val) => {\r\n        if (!valueMap.has(val)) {\r\n            throw Error(`Invalid Value: ${val}. The enum/value should be:\\n${doc}`);\r\n        }\r\n        return valueMap.get(val);\r\n    }\r\n\r\n    for (const val in input) {\r\n        const symbol = String(val).toUpperCase();\r\n        FN[symbol] = type(val);\r\n        FN.enum[symbol] = input[val];\r\n    }\r\n\r\n    return FN;\r\n}\r\n\r\n// module.exports = {\r\n//     CMD,\r\n//     CONNECTIVITY,\r\n//     CONTACT_STATE,\r\n//     ORIENTATION,\r\n//     AFE,\r\n//     IMU,\r\n//     ACC,\r\n// };","// 'use strict';\r\nimport * as Enum from './cmsn_enum.js';\r\n\r\n// Global Variable\r\nlet globalDevice; // todo multi device implement\r\nconst DeviceMap = new Map(); // (uuid: string, device)\r\n\r\n// bstar\r\n// const data_stream_service_uuid = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\"\r\n// const data_stream_uuid_write   = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\"\r\n// const data_stream_uuid_notify  = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\"\r\n\r\n//crimson\r\nconst data_stream_service_uuid = \"0d740001-d26f-4dbb-95e8-a4f5c55c57a9\"\r\nconst data_stream_uuid_write   = \"0d740002-d26f-4dbb-95e8-a4f5c55c57a9\"\r\nconst data_stream_uuid_notify  = \"0d740003-d26f-4dbb-95e8-a4f5c55c57a9\"\r\n\r\nconst availableCallbacks = {\r\n        'onError':               '(CMSNDevice, Error)=>Void',\r\n        'onConnectivityChanged': '(CMSNDevice, Connectivity)=>Void',\r\n        'onDeviceInfoReady':     '(CMSNDevice, DeviceInfo)=>Void',\r\n        'onPairResponse':        '(CMSNDevice, SysConfigResponse)=>Void',\r\n        'onContactStateChanged': '(CMSNDevice, ContactState)=>Void',\r\n        'onOrientationChanged':  '(CMSNDevice, Orientation)=>Void',\r\n        'onBrainWave':           '(CMSNDevice, BrainWave)=>Void',\r\n        'onEEGData':             '(CMSNDevice, EEGData)=>Void',\r\n        'onIMUData':             '(CMSNDevice, IMUData)=>Void',\r\n        'onAttention':           '(CMSNDevice, Float)=>Void',\r\n        'onMeditation':          '(CMSNDevice, Float)=>Void',\r\n};\r\nexport class CMSNDeviceListener {\r\n    constructor(callbacks) {\r\n        const cbs = callbacks? callbacks : {};\r\n        for (const [key, cb] of Object.entries(cbs)) {\r\n            if(key in availableCallbacks){\r\n                if(typeof cb == 'function') this[key] = cb;\r\n                else console.error(`ERROR: Callback for ${key} is not a function, should be ${CMSNDeviceListener.availableCallbacks[key]}`);\r\n            } else console.error(`ERROR:${key} is not an option for ${this}`);            \r\n        }\r\n    }\r\n}\r\nexport class CMSNDevice {\r\n    constructor(window) {\r\n        this.window = window;\r\n    }\r\n\r\n    async setup(listener) {\r\n        this.listener = listener;\r\n        if (this.bleDevice != null) return;\r\n        try {\r\n            const isBluetoothAvailable = await navigator.bluetooth.getAvailability();\r\n            console.log(`> Bluetooth is ${isBluetoothAvailable ? 'available' : 'unavailable'}`);\r\n            if (!isBluetoothAvailable) return;\r\n\r\n            if ('onavailabilitychanged' in navigator.bluetooth) {\r\n                navigator.bluetooth.addEventListener('availabilitychanged', function (event) {\r\n                    console.log(`> Bluetooth is ${event.value ? 'available' : 'unavailable'}`);\r\n                });\r\n            }\r\n\r\n            console.log('Requesting any Bluetooth Device...');\r\n\r\n            let options = {acceptAllDevices: true};\r\n\r\n            navigator.bluetooth.requestDevice(options).then(function(device) {\r\n                console.log('Name: ' + device.name);\r\n            });\r\n\r\n\r\n            // const bleDevice = await navigator.bluetooth.requestDevice({\r\n            //     acceptAllDevices: true,\r\n            //     filters: [{\r\n            //         services: [data_stream_service_uuid]\r\n            //     }],\r\n            //     optionalServices: ['battery_service', 'device_information', data_stream_service_uuid]\r\n            // });\r\n            // if (bleDevice) {\r\n            //     console.log(bleDevice);\r\n            //     this.bleDevice = bleDevice;\r\n            //     bleDevice.addEventListener('gattserverdisconnected', onDisconnected);\r\n            //     // await this.bleDevice.gatt.connect();\r\n            //     this.uuid = bleDevice.id;\r\n            //     this.name = bleDevice.name;\r\n            //     console.log(`uuid=${this.uuid}, name=${this.name}`)\r\n            //     DeviceMap.set(this.uuid, this);\r\n            //     globalDevice = this;\r\n            //     await this.connect();\r\n            // }\r\n\r\n        } catch (error) {\r\n            console.log('Argh! ' + error);\r\n        }\r\n    }\r\n\r\n    async exponentialBackoff(max, delay, toTry, success, fail) {\r\n        const that = this;\r\n        try {\r\n            success(this, await toTry(this));\r\n        } catch (error) {\r\n            if (max === 0) {\r\n                return fail();\r\n            }\r\n            console.log('Retrying in ' + delay + 's... (' + max + ' tries left)');\r\n            setTimeout(function () {\r\n                that.exponentialBackoff(--max, delay * 2, toTry, success, fail);\r\n            }, delay * 1000);\r\n        }\r\n    }\r\n\r\n    async connect() {\r\n        await this.onTryConnect();\r\n        await this.onConnected();\r\n        // this.exponentialBackoff(\r\n        //     3, /* max retries */\r\n        //     1, /* seconds delay */\r\n        //     this.onTryConnect,\r\n        //     this.onConnected,\r\n        //     function fail() {\r\n        //         console.log('Failed to connect.');\r\n        //     });\r\n    }\r\n\r\n    async onTryConnect() {\r\n        console.log('Connecting to Bluetooth Device... ');\r\n        this.connectivity = Enum.CONNECTIVITY.enum('connecting');\r\n        console.log(this.bleDevice.gatt);\r\n        return await this.bleDevice.gatt.connect();\r\n    }\r\n\r\n    async onConnected() {\r\n        console.log('> Bluetooth Device connected.');\r\n        this.connectivity = Enum.CONNECTIVITY.enum('connected');\r\n        \r\n        console.log('Getting Services...');\r\n        const services = await this.bleDevice.gatt.getPrimaryServices();\r\n\r\n        const decoder = new TextDecoder('utf-8');\r\n        console.log('Getting Characteristics...');\r\n\r\n        try {\r\n            const deviceInfo = {};\r\n            for (const service of services) {\r\n                console.log('> Service: ' + service.uuid);\r\n                const characteristics = await service.getCharacteristics();\r\n\r\n                for (const characteristic of characteristics) {\r\n                    //console.log('>> Characteristic: ' + characteristic.uuid + ', service.uuid=' + service.uuid);\r\n                    if (service.uuid == data_stream_service_uuid) {\r\n                        if (characteristic.properties.write) {\r\n                            console.log(`characteristicWrite=${characteristic}`);\r\n                            this.characteristicWrite = characteristic;\r\n\r\n                        } else if (characteristic.properties.notify) {\r\n                            console.log(`characteristicNotify=${characteristic}`);\r\n                            this.characteristicNotify = characteristic;\r\n                            await characteristic.startNotifications();\r\n                            characteristic.addEventListener('characteristicvaluechanged', onCharacteristicValueChanged);\r\n                        }\r\n\r\n                    } else {\r\n                        switch (characteristic.uuid) {\r\n                            case BluetoothUUID.getCharacteristic('battery_level'):\r\n                                await characteristic.startNotifications();\r\n                                characteristic.addEventListener('characteristicvaluechanged', onBatteryLevelChanged);\r\n                                await characteristic.readValue();\r\n                                break;\r\n                            //0x2a24~0x2a29\r\n                            case BluetoothUUID.getCharacteristic('manufacturer_name_string'):\r\n                                const manufacturer = await characteristic.readValue();\r\n                                deviceInfo.manufacturer = decoder.decode(manufacturer);\r\n                                console.log('> manufacturer_name: ' + deviceInfo.manufacturer);\r\n                                break;\r\n                            case BluetoothUUID.getCharacteristic('model_number_string'):\r\n                                const model = await characteristic.readValue();\r\n                                deviceInfo.model = decoder.decode(model);\r\n                                console.log('> model_number: ' + deviceInfo.model);\r\n                                break;\r\n                            case BluetoothUUID.getCharacteristic('serial_number_string'):\r\n                                const serial = await characteristic.readValue();\r\n                                deviceInfo.serial = decoder.decode(serial);\r\n                                console.log('> serial_number: ' + deviceInfo.serial);\r\n                                break;\r\n                            case BluetoothUUID.getCharacteristic('hardware_revision_string'):\r\n                                const hardware = await characteristic.readValue();\r\n                                deviceInfo.hardware = decoder.decode(hardware);\r\n                                console.log('> hardware_revision: ' + deviceInfo.hardware);\r\n                                break;\r\n                            case BluetoothUUID.getCharacteristic('firmware_revision_string'):\r\n                                const firmware = await characteristic.readValue();\r\n                                deviceInfo.firmware = decoder.decode(firmware);\r\n                                console.log('> firmware_revision: ' + deviceInfo.firmware);\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.deviceInfo = deviceInfo;\r\n            if (this.listener) this.listener.onDeviceInfoReady(this, this.deviceInfo);\r\n\r\n        } catch (error) {\r\n            console.log('Argh! ' + error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Enum.CONNECTIVITY} connectivity\r\n     */\r\n    set connectivity(connectivity) {\r\n        this._connectivity = connectivity;\r\n        if (this.listener) this.listener.onConnectivityChanged(this, connectivity);\r\n    }\r\n\r\n    reset() {\r\n        this.characteristicWrite = undefined;\r\n        this.characteristicNotify = undefined;\r\n    }\r\n\r\n    sendMessage(params) {\r\n        if (this.characteristicWrite == undefined) {\r\n            console.warn('device is not reday.');\r\n            return;\r\n        }\r\n        params.cb = undefined; // TODO can not post function params\r\n        console.log(`sendMessage, ${JSON.stringify(params)}`);\r\n        this.postToSanbox('sendMessage', params);\r\n    }\r\n\r\n    postToSanbox(command, params) {\r\n        var message = {\r\n            uuid: this.uuid,\r\n            command: command,\r\n            params: params\r\n        };\r\n        this.window.postMessage(message, '*');\r\n    }\r\n\r\n    pair(isInPairingMode) {\r\n        this.sendMessage({\r\n            cmd: Enum.CMD.enum('pair'), isInPairingMode: isInPairingMode,\r\n            // cb: function (deviceId, success, message) {\r\n            //     if (this.listener) this.listener.onPairResponse(this, success);\r\n            // } \r\n        });\r\n    }\r\n\r\n    startDataStream() {\r\n        this.sendMessageWithCmd(Enum.CMD.enum('startDataStream'));\r\n    }\r\n\r\n    stopDataStream() {\r\n        this.sendMessageWithCmd(Enum.CMD.enum('stopDataStream'));\r\n    }\r\n\r\n    startIMU(sampleRate, cb) {\r\n        var params = {cmd: Enum.CMD.enum('afeConfig'), sampleRate: sampleRate, cb: cb}\r\n        console.log(`startIMU, ${params}`);\r\n        this.sendMessage(params);\r\n    }\r\n\r\n    stopIMU(cb) {\r\n        var params = { cmd: Enum.CMD.enum('imuConfig'), sampleRate: Enum.IMU.SAMPLE_RATE.unused, cb: cb};\r\n        console.log(`stopIMU, ${params}`);\r\n        this.sendMessage(params);\r\n    }\r\n\r\n    setLedColor(color) {\r\n        this.sendMessage({ cmd: Enum.CMD.enum('setLedColor'), color: color });\r\n    }\r\n\r\n    setDeviceName(name, cb) {\r\n        this.sendMessage({ cmd: Enum.CMD.enum('setDeviceName'), name: name, cb: cb });\r\n    }\r\n\r\n    setSleepIdleTime(sleepIdleTime, cb) {\r\n        this.sendMessage({ cmd: Enum.CMD.enum('setSleepIdleTime'), value: sleepIdleTime, cb: cb });\r\n    }\r\n\r\n    setVibrationIntensity(vibration, cb) {\r\n        this.sendMessage({ cmd: Enum.CMD.enum('setVibrationIntensity'), value: vibration, cb: cb });\r\n    }\r\n\r\n    sendMessageWithCmd(cmd, cb) {\r\n        this.sendMessage({ cmd: cmd, cb: cb });\r\n    }\r\n}\r\n\r\nwindow.addEventListener('message', async function (event) {\r\n    const command = event.data.command;\r\n    const params = event.data.params;\r\n    // console.debug(`getMessage, command=${command}`);\r\n    // console.debug(`getMessage, params=${JSON.stringify(params)}`);\r\n\r\n    // TODO\r\n    const deviceId = params.deviceId;\r\n    const device = DeviceMap.get(deviceId);\r\n    if (device == null) {\r\n        console.error('device == null');\r\n        return;\r\n    }\r\n    // const device = globalDevice;\r\n    \r\n    switch (command) {\r\n        case 'onContactStateChanged':\r\n            const contactState = params.contactState;\r\n            // console.log(`[${device.name}] onContactStateChanged: ${contactState}`);\r\n            if (device && device.listener) device.listener.onContactStateChanged(device, contactState);\r\n            break;\r\n        case 'onOrientationChanged':\r\n            const orientation = params.orientation;\r\n            // console.log(`[${device.name}] onOrientationChanged: ${orientation}`);\r\n            if (device && device.listener) device.listener.onOrientationChanged(device, orientation);\r\n            break;\r\n        case 'onEEGData':\r\n            const eeg = params.eeg;\r\n            // console.log(`[${device.name}] onEEGData: ${eeg}`);\r\n            if (device && device.listener) device.listener.onEEGData(device, eeg);\r\n            break;\r\n        case 'onBrainWave':\r\n            const stats = params.stats;\r\n            // console.log(`[${device.name}] onBrainWave: ${stats}`);\r\n            if (device && device.listener) device.listener.onBrainWave(device, stats);\r\n            break;\r\n        case 'onIMUData':\r\n            const imu = params.imu;\r\n            // console.log(`[${device.name}] onIMUData: ${imu}`);\r\n            if (device && device.listener) device.listener.onIMUData(device, attention);\r\n            break;    \r\n        case 'onAttention':\r\n            const attention = params.value;\r\n            // console.log(`[${device.name}] onAttention: ${attention}`);\r\n            if (device && device.listener) device.listener.onAttention(device, attention);\r\n            break;\r\n        case 'onMeditation':\r\n            const meditation = params.value;\r\n            // console.log(`[${device.name}] onMeditation: ${meditation}`);\r\n            if (device && device.listener) device.listener.onMeditation(device, meditation);\r\n            break;\r\n        case 'writeValue':\r\n            if (device.characteristicWrite == undefined) {\r\n                console.log('characteristicWrite null');\r\n                return;\r\n            }\r\n            device.characteristicWrite.writeValue(params.data)\r\n            // const value = params.data;\r\n            // console.log(value);\r\n            // console.log(device.characteristicWrite);\r\n            break;\r\n        default: break; \r\n    }\r\n});\r\n\r\nfunction onDisconnected() {\r\n    console.log('> Bluetooth Device disconnected');\r\n    console.log(this);\r\n    const device = DeviceMap.get(this.id);\r\n    console.log(device);\r\n    if (device) {\r\n        device.reset();\r\n        this.connectivity = Enum.CONNECTIVITY.enum('disconnected');\r\n        \r\n        setTimeout(() => {\r\n            device.connect(); // try reconnect\r\n        }, 1000);\r\n    }  \r\n}\r\n\r\nfunction onBatteryLevelChanged(event) {\r\n    const batteryLevel = event.target.value.getUint8(0);\r\n    console.log('> Battery Level is ' + batteryLevel + '%');\r\n    // console.log(event);\r\n    globalDevice.batteryLevel = batteryLevel;\r\n    // const device = DeviceMap.get(this.id);\r\n    // console.log(device);\r\n    // if (device) {\r\n    //     device.batteryLevel = batteryLevel;\r\n    // }\r\n}\r\n\r\nfunction onCharacteristicValueChanged(event) {\r\n    const value = event.target.value;\r\n    const arrayBuffer = value.buffer;\r\n    const data = new Uint8Array(arrayBuffer);\r\n    // console.log(event);\r\n    globalDevice.postToSanbox('didReceiveData', { data: data });\r\n    // const device = DeviceMap.get(this.id);\r\n    // console.log(device);\r\n    // if (device) {\r\n    //     device.postToSanbox('didReceiveData', { data: data });\r\n    // }\r\n}\r\n\r\n// module.exports = {\r\n//     CMSNDeviceListener,\r\n//     CMSNDevice,\r\n// };","// import * as sdk from '../dist/cmsn_sdk.min.js';\r\n// console.log(sdk);\r\n \r\nimport * as Enum from './src/cmsn_enum.js';\r\nimport * as sdk from './src/cmsn_sdk.js';\r\n\r\n// const ws = new WebSocket(\"ws://localhost:8080\");\r\n\r\n// ws.addEventListener(\"open\", () => {\r\n//     console.log(\"Client Side Connection Established\");\r\n// })\r\n\r\n// ws.addEventListener(\"message\", ({data}) => {\r\n//     //console.log(data);\r\n// })\r\n \r\nfunction eventRaised(value, type) { \r\n    console.log(\"Event Raised\");\r\n\r\n    var text = '{ \"time\"  : \"' + new Date() + '\",'\r\n             + '  \"value\" : \"' + value + '\",'\r\n             + '  \"type\"  : \"' + type + '\",'\r\n             + '  \"userName\" : \"AUTOI\"' \r\n             + '}';\r\n             \r\n    //ws.send(text);\r\n}\r\n\r\nconst exampleListener = new sdk.CMSNDeviceListener({\r\n    onConnectivityChanged:(device, connectivity)=>{ //Connectivity\r\n        console.log({ message: `[${device.name}] Connectivity changed to: ${Enum.CONNECTIVITY(connectivity)}` });\r\n        document.getElementById('connectivity').innerText = 'connectivity: ' + Enum.CONNECTIVITY(connectivity);\r\n    },\r\n    onDeviceInfoReady:   (device, deviceInfo)=>{  //deviceInfo\r\n        console.log(`[${device.name}] Device info is ready:`);\r\n        console.log(deviceInfo);\r\n        document.getElementById('deviceInfo').innerText = JSON.stringify(deviceInfo);\r\n    },\r\n    onContactStateChanged: (device, contactState) => { //ContactState\r\n        console.log({ message: `[${device.name}] Contact state changed to:${Enum.CONTACT_STATE(contactState)}` });\r\n        document.getElementById('contactState').innerText = 'contactState: ' + Enum.CONTACT_STATE(contactState);\r\n    },\r\n    onOrientationChanged: (device, orientation)=>{ //Orientation\r\n        console.log(`[${device.name}] Orientation changed to:${Enum.ORIENTATION(orientation)}`);\r\n    },\r\n    onEEGData:           (_, eegData)=> {   //EEGData\r\n        console.log(\"EEG data received:\");\r\n        console.log(eegData); \r\n    },\r\n    onBrainWave:           (_, stats)=> {   //BrainWave\r\n        console.log(\"BrainWave data received:\");\r\n        console.log(stats); \r\n    },\r\n    onIMUData:           (_, imuData)=> {   //IMUData\r\n        console.log(\"IMU data received:\");\r\n        console.log(imuData); \r\n    },\r\n    onAttention:         (device, attention)=>{   //Float\r\n        console.log({ message: `[${device.name}] Attention:${attention}` });\r\n        var label = document.getElementById('attention');\r\n        label.innerText = 'attention=' + attention.toFixed(1);\r\n        eventRaised(attention, 'Attention');\r\n    },\r\n    onMeditation:        (device, meditation)=>{  //Float\r\n        console.log(`[${device.name}] Meditation:${meditation}`);\r\n        var label = document.getElementById('meditation');\r\n        label.innerText = 'meditation=' + meditation.toFixed(1);\r\n        eventRaised(meditation, 'Meditation');\r\n    },\r\n});\r\n\r\nfunction addExampleButtons() {\r\n    let btnBTH = document.getElementById(\"btn-scan-bluetooth\");\r\n    btnBTH.onclick = async function() {\r\n        console.log(\"************ Setup ************\");\r\n        await device.setup(exampleListener);\r\n    };\r\n  \r\n    // let page = document.getElementById('page');\r\n    // let steupBtn = document.getElementById('setup');\r\n    // steupBtn.onclick = async function() {\r\n    //     console.log(\"************ Setup ************\");\r\n    //     await device.setup(exampleListener);\r\n    // };\r\n\r\n    // let eventBtn = document.getElementById('btn-event');\r\n    // eventBtn.onclick = async function() {\r\n    //     eventRaised();\r\n    // };\r\n\r\n    // for (var i = 1; i <= 2; i++) {\r\n    //     let btn = document.createElement('div');\r\n    //     btn.setAttribute(\"class\", 'btn');\r\n    //     btn.innerText = Enum.CMD(i);\r\n    //     btn.onclick = onClick(btn, i);\r\n    //     page.appendChild(btn);\r\n    // }\r\n}\r\n\r\nfunction onClick(btn, i) {\r\n    function f() {\r\n        switch (i) {\r\n            // case Enum.CMD.enum('imuConfig'):\r\n            //     const sampleRate = Enum.IMU.SAMPLE_RATE.enum('sr416');\r\n            //     device.startIMU(sampleRate);\r\n            //     break;\r\n            \r\n            case Enum.CMD.enum('pair'):\r\n                // LED flash fast\r\n                device.pair(true);\r\n                break;\r\n            case Enum.CMD.enum('checkPairStatus'):\r\n                // LED flash normal\r\n                device.pair(false);\r\n                break;\r\n            \r\n            // case Enum.CMD.enum('setLEDColor'):\r\n            //     // device.setLEDColor([255, 255, 0]);\r\n            //     device.setLEDColor([255, 0, 0]);\r\n            //     break;\r\n            // case Enum.CMD.enum('setDeviceName'):\r\n            //     device.setDeviceName('cmsn_OK');\r\n            //     break;\r\n            // case Enum.CMD.enum('setSleepIdleTime'):\r\n            //     device.setSleepIdleTime(120); //0~1000\r\n            //     break;\r\n            // case Enum.CMD.enum('setVibrationIntensity'):\r\n            //     device.setVibrationIntensity(1); //1~100\r\n            //     break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return f;\r\n}\r\n\r\nexport async function scanBluetooth() {\r\n    console.log(\"************ Setup ************\");\r\n    await device.setup(exampleListener);\r\n}\r\n\r\nconst window = document.getElementById('sandboxFrame').contentWindow;\r\nconst device = new sdk.CMSNDevice(window);\r\n\r\n// ( window.onload = function () {\r\n//     console.log(\"Extension JS Document : \" , document);\r\n//      document.getElementById(\"btn-scan-bluetooth\").addEventListener(\"click\", \r\n//         async function() {\r\n//             console.log(\"************ Setup ************\");\r\n//             await device.setup(exampleListener);    \r\n//      });\r\n//  });\r\n\r\naddExampleButtons();\r\n"]}